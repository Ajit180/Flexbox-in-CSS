Q1: Explain the main differences between the CSS Flexbox layout model and the CSS Grid layout model. When would you Choose to use one over 
the others?

Solutions:

         Sure, let’s break down the differences between Flexbox and Grid in CSS:

### CSS Flexbox

1. Layout Type:
   - One-dimensional: Flexbox is designed for one-dimensional layouts. This means it’s great for laying out items in a row or a column.

2. Main and Cross Axes:
   - Flexbox uses two axes: the main axis (horizontal or vertical depending on the flex-direction) and the cross axis (perpendicular to the main axis). It provides control over alignment, spacing, and distribution of items along these axes.

3. Use Cases:
   - Simple layouts: Flexbox is ideal for simpler layouts or components, like navigation bars, buttons, or simple grids.
   - Alignment: It's particularly strong in aligning items, either centrally or spaced out evenly along the axis.

4. Flexibility:
   - Flex items: Items inside a flex container can grow or shrink to fit the available space, which makes it useful for responsive design.

### CSS Grid

1. Layout Type:
   - Two-dimensional: Grid is designed for two-dimensional layouts, which means you can work with rows and columns simultaneously.

2. Rows and Columns:
   - Grid allows for complex layouts: You can create intricate designs by defining both rows and columns, and placing items into specific grid cells or areas.

3. Use Cases:
   - Complex layouts: Grid is better suited for more complex layouts where you need to control both the row and column structure, such as complex web pages or application interfaces.
   - Area-based layout: Grid allows you to define specific areas for content, which can be very powerful for designing more elaborate structures.

4. Flexibility:
   - Grid items: Items in a grid container are placed into defined cells, which provides more control over the positioning of items within a two-dimensional space.

### When to Use Each:

- Use Flexbox:
  - For simpler, one-dimensional layouts where you need to control alignment and distribution of items in a single direction.
  - When you need responsiveness with items that can grow and shrink relative to the container.

- Use Grid:
  - For complex, two-dimensional layouts where you need to manage both rows and columns.
  - When designing layouts that involve overlapping items or precise placement in a structured grid.

Both tools are incredibly powerful, and often, you might find yourself using them together to leverage their respective strengths.