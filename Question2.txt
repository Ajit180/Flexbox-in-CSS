Q2: Explain the Role of the following key Properties in the Flexbox layout Model.
   1.Flex Direction
   2.align- items 
   3.gap 
   4.flex-direction
   5.flex-wrap

Solution: 

Certainly! Here's a detailed explanation of the role of each key property in the Flexbox layout model:

### 1. `flex-direction`

- Role: Specifies the direction in which flex items are placed in the flex container.
- Values:
  - `row`: Flex items are arranged in a horizontal line, from left to right.
  - `row-reverse`: Flex items are arranged in a horizontal line, from right to left.
  - `column`: Flex items are arranged in a vertical line, from top to bottom.
  - `column-reverse`: Flex items are arranged in a vertical line, from bottom to top.

Example:

```css
.container {
  display: flex;
  flex-direction: column; /* Flex items are arranged vertically */
}
```

### 2. `align-items`

- Role: Aligns flex items along the cross axis (the axis perpendicular to the main axis defined by `flex-direction`).
- Values:
  - `stretch`: Default. Flex items stretch to fill the containerâ€™s cross axis.
  - `flex-start`: Aligns items at the start of the cross axis.
  - `center`: Centers items along the cross axis.
  - `flex-end`: Aligns items at the end of the cross axis.
  - `baseline`: Aligns items along their baselines.

Example:
```css
.container {
  display: flex;
  align-items: center; /* Flex items are centered vertically if the direction is row */
}
```

### 3. `gap`

- Role: Defines the space between flex items. It provides consistent spacing between items, similar to grid layouts.
- Values:
  - A length value (e.g., `10px`, `1rem`).

Example:
```css
.container {
  display: flex;
  gap: 20px; /* 20px space between flex items */
}
```

### 4. `flex-wrap`

- Role: Determines whether flex items should wrap onto multiple lines or stay on a single line.
- Values:
  - `nowrap`: Default. Flex items are kept on a single line.
  - `wrap`: Flex items wrap onto multiple lines if needed.
  - `wrap-reverse`: Flex items wrap onto multiple lines in reverse order.

Example:

```css

.container {
  display: flex;
  flex-wrap: wrap; /* Flex items will wrap onto multiple lines if necessary */
}
```

### 5. `flex-direction` (Already Explained Above)

To summarize:
- `flex-direction`: Specifies the direction of flex items in the flex container.
- `align-items`: Aligns items along the cross axis.
- `gap`: Sets spacing between flex items.
- `flex-wrap`: Controls whether flex items wrap onto multiple lines.

These properties work together to provide flexibility and control over the layout of items within a flex container.